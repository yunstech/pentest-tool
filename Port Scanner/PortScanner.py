import argparse
import logging
from socket import gethostbyname, socket, AF_INET, SOCK_STREAM, timeout
from pprint import pprint

DEFAULT_PORTS = [21, 22, 23, 25, 53, 80, 110, 137, 138, 139, 143, 443, 445, 548, 587, 993, 995, 1433, 1701, 1723, 3306, 5432, 8008, 8443, 515, 631, 3282, 3389, 5190, 5050, 4443, 1863, 6891, 1503, 5631, 5632, 5900, 6667]

def resolve_host(host):
    try:
        ip_address = gethostbyname(host)
        return ip_address
    except socket.error as e:
        logging.error(f"Cannot resolve host {host}: {e}")
        return None

def port_scanner(host, port):
    try:
        with socket(AF_INET, SOCK_STREAM) as s:
            s.settimeout(3)
            s.connect((host, port))
            logging.info(f"Port {port} is open on host {host}")
            # logging.info(s.recv(1024))
            print("\n")
            return True
    except (timeout, ConnectionRefusedError, OSError) as e:
        return False

def scan_ports(hosts, port_list, scanned_ips):
    open_ports = {}

    for host in hosts:
        ip_address = resolve_host(host)
        if ip_address:
            if ip_address in scanned_ips:
                logging.info(f"Skipping {ip_address} as it is already scanned.")
                continue

            scanned_ips.add(ip_address)

            open_ports[host] = [port for port in port_list if port_scanner(ip_address, port)]

    return open_ports

def parse_arguments():
    parser = argparse.ArgumentParser(description='Sevima port scanner.')
    parser.add_argument('-l', '--list', type=str, help='Path to Domain or IP list address to scan.')
    parser.add_argument('-ip', '--ip', type=str, help='IP to scan.')
    parser.add_argument('-pr', '--portRange', type=str, help='Port Range to scan (ex. 1-100).')
    parser.add_argument('-s', '--single', help='Use single IP.', action='store_true')
    return parser.parse_args()

def main():
    args = parse_arguments()

    if args.single and args.list:
        logging.error("Error: Options -l and -ip are mutually exclusive.")
        return

    PORTS = []
    if args.portRange:
        port_range = args.portRange.split('-')
        PORTS = list(range(int(port_range[0]), int(port_range[1]) + 1))
    else:
        PORTS = DEFAULT_PORTS

    scanned_ips = set()

    if args.single:
        for port in PORTS:
            port_scanner(args.ip, port)
    else:
        try:
            with open(args.list, 'r') as file:
                list_hosts = file.read().split('\n')
        except FileNotFoundError as e:
            logging.error(f"File not found: {args.list}. {e}")
            return

        open_ports = scan_ports(list_hosts, PORTS, scanned_ips)
        logging.info("Open ports are: ")
        pprint(open_ports, indent=4, width=120)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
